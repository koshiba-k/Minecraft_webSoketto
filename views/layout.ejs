<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minecraftアイテムショップ</title>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="stylesheet" href="/css/style.css?v=20240622">
    <script src="/js/image-mapping.js"></script>
</head>
<body style="font-size: 1.18em;">
    <header style="position: fixed; top: 0; left: 0; width: 100%; z-index: 1000; background: #232f3e; color: #fff; box-shadow: 0 2px 8px rgba(35,47,62,0.08); height: 92px;">
        <nav class="main-nav" style="position: relative; width: 100%; max-width: 1400px; margin: 0 auto; display: flex; align-items: center; justify-content: center;">
            <div class="logo" style="position: absolute; left: 0; top: 70%; transform: translate(-50%, 20%); font-size: 1.5em; font-weight: bold; letter-spacing: 0.04em;">Minecraftアイテムショップ</div>
            <ul class="nav-links" style="position: absolute; top: 30%; left: 60%; transform: translate(-50%,40%); display: flex; gap: 1.7rem; font-size: 1.18em; margin: 0 auto;">
                <% if (typeof user !== 'undefined' && user) { %>
                    <% if (user.is_admin) { %>
                        <li><a href="/admin"><img src="/images/1.png" class="nav-icon"> 管理者</a></li>
                    <% } %>
                    <% if (typeof user !== 'undefined' && user && user.isAdmin) { %>
                        <li><a href="/admin"><img src="/images/1.png" class="nav-icon"> 管理者</a></li>
                    <% } %>
                    <li><a href="/shop"><img src="/images/2.png" class="nav-icon"> ショップ</a></li>
                    <li><a href="/shop/cart"><img src="/images/3.png" class="nav-icon"> カート</a></li>
                    <li><a href="/shop/wishlist"><img src="/images/4.png" class="nav-icon"> ウィッシュリスト</a></li>
                    <li><a href="/shop/history"><img src="/images/5.png" class="nav-icon"> 購入履歴</a></li>
                    <li><a href="/shop/monster-history"><img src="/images/5.png" class="nav-icon"> モンスター討伐履歴</a></li>
                    <li style="position:relative;"><img src="/images/6.png" class="nav-icon"> <span>所持金: <span id="user-balance"><%= user.balance.toLocaleString() %></span>円</span>
                        <span id="balance-effect" style="position:absolute; right:0; top:-18px; font-size:1.1em; color:#ffeb3b; font-weight:bold; pointer-events:none; opacity:0; transition:opacity 0.3s, transform 0.7s;"></span>
                    </li>
                    <li><a href="/auth/logout"><img src="/images/7.png" class="nav-icon"> ログアウト</a></li>
                <% } else { %>
                    <li><a href="/auth/login">ログイン</a></li>
                <% } %>
            </ul>
        </nav>
    </header>

    <div class="container" style="padding-top:110px;">
        <%- body %>
    </div>

    <style>
    #balance-effect.show {
      opacity: 1;
      transform: translateY(-18px) scale(1.25);
      animation: balance-pop 1.1s cubic-bezier(.4,2,.6,1) forwards;
    }
    @keyframes balance-pop {
      0% { opacity: 1; transform: translateY(0) scale(1.1); }
      60% { opacity: 1; transform: translateY(-18px) scale(1.25); }
      100% { opacity: 0; transform: translateY(-32px) scale(1.1); }
    }
    </style>

    <script>
        let lastBalance = <%= user.balance %>;
        // 数量更新関数
        function updateQuantity(itemId, change) {
            const input = document.getElementById('quantity-' + itemId);
            const newValue = Math.max(0, parseInt(input.value) + change);
            input.value = newValue;
        }

        // カートに追加関数
        function addToCart(itemId) {
            const quantity = document.getElementById('quantity-' + itemId).value;
            if (quantity > 0) {
                fetch('/shop/add-to-cart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        itemId: itemId,
                        quantity: parseInt(quantity)
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showPopup('カートに追加しました！');
                        document.getElementById('quantity-' + itemId).value = 0;
                    } else {
                        showPopup('エラー: ' + (data.message || '追加に失敗しました'));
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showPopup('エラーが発生しました');
                });
            } else {
                showPopup('数量を選択してください');
            }
        }

        // カートから削除関数
        function removeFromCart(itemId) {
            fetch('/shop/remove-from-cart', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ itemId: itemId })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showPopup('カートから削除しました');
                    location.reload();
                } else {
                    showPopup('エラー: ' + (data.message || '削除に失敗しました'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showPopup('エラーが発生しました');
            });
        }

        // ポップアップ表示関数
        function showPopup(message) {
            let popup = document.createElement('div');
            popup.className = 'custom-popup';
            popup.innerText = message;
            document.body.appendChild(popup);
            setTimeout(() => {
                popup.classList.add('show');
            }, 10);
            setTimeout(() => {
                popup.classList.remove('show');
                setTimeout(() => document.body.removeChild(popup), 300);
            }, 1800);
        }

        // 購入確定関数
        function purchase() {
            fetch('/shop/purchase', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showPopup('購入が完了しました！');
                    setTimeout(() => {
                        window.location.href = '/shop/history';
                    }, 1200);
                } else {
                    showPopup('エラー: ' + (data.error || '購入に失敗しました'));
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showPopup('エラーが発生しました');
            });
        }

        // --- 残高自動更新 ---
        setInterval(function() {
            fetch('/shop/api/balance')
              .then(res => res.json())
              .then(data => {
                if (typeof data.balance !== 'undefined') {
                  const el = document.getElementById('user-balance');
                  const effect = document.getElementById('balance-effect');
                  const newBalance = Number(data.balance);
                  if (el) {
                    el.textContent = newBalance.toLocaleString();
                  }
                  if (effect && newBalance > lastBalance) {
                    const diff = newBalance - lastBalance;
                    effect.textContent = `+${diff.toLocaleString()}円`;
                    effect.classList.add('show');
                    setTimeout(() => {
                      effect.classList.remove('show');
                    }, 1100);
                  }
                  lastBalance = newBalance;
                }
              });
        }, 3000); // 3秒ごとに更新
    </script>
</body>
</html> 